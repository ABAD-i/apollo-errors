{"version":3,"sources":["../src/index.js"],"names":["errorMap","Map","DELIMITER","serializeName","arr","reduce","str","val","length","deserializeName","name","split","push","shift","join","ApolloError","message","time_thrown","Date","toISOString","data","t","arguments","thrown_at","d","Object","assign","_name","_humanized_message","_time_thrown","_data","createError","e","bind","set","formatError","originalError","returnNull","CustomError","get","error","serialize"],"mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;AAEA,IAAMA,WAAW,IAAIC,GAAJ,EAAjB;;AAEA,IAAMC,YAAY,GAAlB;;AAEA,IAAMC,gBAAgB,SAAhBA,aAAgB;AAAA,MAACC,GAAD,uEAAO,EAAP;AAAA,SAAcA,IAAIC,MAAJ,CAAW,UAACC,GAAD,EAAMC,GAAN;AAAA,iBAAiBD,IAAIE,MAAJ,GAAa,CAAb,GAAiBF,MAAMJ,SAAvB,GAAmCI,GAApD,IAA0DC,GAA1D;AAAA,GAAX,EAA4E,EAA5E,CAAd;AAAA,CAAtB;AACA,IAAME,kBAAkB,SAAlBA,eAAkB,GAAe;AAAA,MAAdC,IAAc,uEAAP,EAAO;;AACrC,MAAMN,MAAM,EAAZ;AACA,MAAME,MAAMI,KAAKC,KAAL,CAAWT,SAAX,CAAZ;AACAE,MAAIQ,IAAJ,CAASN,IAAIO,KAAJ,EAAT;AACAT,MAAIQ,IAAJ,CAASN,IAAIQ,IAAJ,CAASZ,SAAT,CAAT;AACA,SAAOE,GAAP;AACD,CAND;;IAQMW,W;;;AACJ,uBAAaL,IAAb,QAIG;AAAA,QAHDM,OAGC,QAHDA,OAGC;AAAA,gCAFDC,WAEC;AAAA,QAFDA,WAEC,oCAFc,IAAIC,IAAJ,EAAD,CAAaC,WAAb,EAEb;AAAA,yBADDC,IACC;AAAA,QADDA,IACC,6BADM,EACN;;AAAA;;AACD,QAAMC,IAAKC,UAAU,CAAV,KAAgBA,UAAU,CAAV,EAAaC,SAA9B,IAA4CN,WAAtD;AACA,QAAMO,IAAIC,OAAOC,MAAP,CAAc,EAAd,EAAkBN,IAAlB,EAA0BE,UAAU,CAAV,KAAgBA,UAAU,CAAV,EAAaF,IAA9B,IAAuC,EAAhE,CAAV;;AAFC,0HAIKjB,cAAc,CAClBO,IADkB,EAElBW,CAFkB,CAAd,CAJL;;AASD,UAAKM,KAAL,GAAajB,IAAb;AACA,UAAKkB,kBAAL,GAA0BZ,WAAW,EAArC;AACA,UAAKa,YAAL,GAAoBR,CAApB;AACA,UAAKS,KAAL,GAAaN,CAAb;AAZC;AAaF;;;;gCACY;AACX,UAAMd,OAAO,KAAKiB,KAAlB;AACA,UAAMX,UAAU,KAAKY,kBAArB;AACA,UAAMX,cAAc,KAAKY,YAAzB;AACA,UAAMT,OAAO,KAAKU,KAAlB;AACA,aAAO;AACLd,wBADK;AAELN,kBAFK;AAGLO,gCAHK;AAILG;AAJK,OAAP;AAMD;;;;;;AAGI,IAAMW,oCAAc,SAAdA,WAAc,CAACrB,IAAD,EAAuD;AAAA,MAAhDU,IAAgD,uEAAzC,EAAEJ,SAAS,uBAAX,EAAyC;;AAChF,MAAMgB,IAAIjB,YAAYkB,IAAZ,CAAiB,IAAjB,EAAuBvB,IAAvB,EAA6BU,IAA7B,CAAV;AACApB,WAASkC,GAAT,CAAaxB,IAAb,EAAmBsB,CAAnB;AACA,SAAOA,CAAP;AACD,CAJM;;AAMA,IAAMG,oCAAc,SAAdA,WAAc,CAACC,aAAD,EAAuC;AAAA,MAAvBC,UAAuB,uEAAV,KAAU;;AAAA,yBACpC5B,gBAAgB2B,cAAcpB,OAA9B,CADoC;AAAA;AAAA,MACxDN,IADwD;AAAA,MAClDa,SADkD;;AAEhE,MAAI,CAACb,IAAL,EAAW,OAAO2B,aAAa,IAAb,GAAoBD,aAA3B;AACX,MAAME,cAActC,SAASuC,GAAT,CAAa7B,IAAb,CAApB;AACA,MAAI,CAAC4B,WAAL,EAAkB,OAAOD,aAAa,IAAb,GAAoBD,aAA3B;AAClB,MAAMI,QAAQ,IAAIF,WAAJ,CAAgB;AAC5Bf;AAD4B,GAAhB,CAAd;AAGA,SAAOiB,MAAMC,SAAN,EAAP;AACD,CATM","file":"index.js","sourcesContent":["import ExtendableError from 'es6-error';\n\nconst errorMap = new Map();\n\nconst DELIMITER = ':';\n\nconst serializeName = (arr = []) => arr.reduce((str, val) => `${str.length > 0 ? str + DELIMITER : str}${val}`, '');\nconst deserializeName = (name = '') => {\n  const arr = [];\n  const str = name.split(DELIMITER);\n  arr.push(str.shift());\n  arr.push(str.join(DELIMITER));\n  return arr;\n};\n\nclass ApolloError extends ExtendableError {\n  constructor (name, {\n    message,\n    time_thrown = (new Date()).toISOString(),\n    data = {}\n  }) {\n    const t = (arguments[2] && arguments[2].thrown_at) || time_thrown;\n    const d = Object.assign({}, data, ((arguments[2] && arguments[2].data) || {}));\n\n    super(serializeName([\n      name,\n      t\n    ]));\n\n    this._name = name;\n    this._humanized_message = message || '';\n    this._time_thrown = t;\n    this._data = d;\n  }\n  serialize () {\n    const name = this._name;\n    const message = this._humanized_message;\n    const time_thrown = this._time_thrown;\n    const data = this._data;\n    return {\n      message,\n      name,\n      time_thrown,\n      data\n    };\n  }\n}\n\nexport const createError = (name, data = { message: 'An error has occurred' }) => {\n  const e = ApolloError.bind(null, name, data);\n  errorMap.set(name, e);\n  return e;\n};\n\nexport const formatError = (originalError, returnNull = false) => {\n  const [ name, thrown_at ] = deserializeName(originalError.message);\n  if (!name) return returnNull ? null : originalError;\n  const CustomError = errorMap.get(name);\n  if (!CustomError) return returnNull ? null : originalError;\n  const error = new CustomError({\n    thrown_at\n  });\n  return error.serialize();\n};\n"]}