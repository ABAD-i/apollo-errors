{"version":3,"sources":["../src/index.js"],"names":["errorMap","Map","DELIMITER","serializeName","arr","reduce","str","val","length","toString","deserializeName","name","split","ApolloError","message","time_thrown","Date","toISOString","data","t","arguments","thrown_at","d","Object","assign","JSON","stringify","_name","_humanized_message","_time_thrown","_data","createError","e","bind","set","formatError","originalError","returnNull","undefined","parse","CustomError","get","error","serialize"],"mappings":"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","file":"index.js","sourcesContent":["import ExtendableError from 'es6-error';\n\nconst errorMap = new Map();\n\nconst DELIMITER = '/::/';\n\nconst serializeName = (arr = []) => arr.reduce((str, val) => `${str.length > 0 ? str + DELIMITER : str}${val.toString ? val.toString() : val}`, '');\nconst deserializeName = (name = '') => name.split(DELIMITER);\n\nclass ApolloError extends ExtendableError {\n  constructor (name, {\n    message,\n    time_thrown = (new Date()).toISOString(),\n    data = {}\n  }) {\n    const t = (arguments[2] && arguments[2].thrown_at) || time_thrown;\n    const d = Object.assign({}, data, ((arguments[2] && arguments[2].data) || {}));\n\n    super(serializeName([\n      name,\n      t,\n      Object.assign({}, d, {\n        toString: () => JSON.stringify(d)\n      })\n    ]));\n\n    this._name = name;\n    this._humanized_message = message || '';\n    this._time_thrown = t;\n    this._data = d;\n  }\n  serialize () {\n    const name = this._name;\n    const message = this._humanized_message;\n    const time_thrown = this._time_thrown;\n    const data = this._data;\n    return {\n      message,\n      name,\n      time_thrown,\n      data\n    };\n  }\n}\n\nexport const createError = (name, data = { message: 'An error has occurred' }) => {\n  const e = ApolloError.bind(null, name, data);\n  errorMap.set(name, e);\n  return e;\n};\n\nexport const formatError = (originalError, returnNull = false) => {\n  const [ name, thrown_at, d ] = deserializeName(originalError.message);\n  const data = d !== undefined ? JSON.parse(d) : {};\n  if (!name) return returnNull ? null : originalError;\n  const CustomError = errorMap.get(name);\n  if (!CustomError) return returnNull ? null : originalError;\n  const error = new CustomError({\n    thrown_at,\n    data\n  });\n  return error.serialize();\n};\n"]}